/* 
  c++ code
  problem - https://www.hackerrank.com/contests/101hack44/challenges/palindromic-subsets
  Solution - Segment Tree with Lazy Propagation, Combinatorics
  Difficulty - Hard
  
  Date-14/12/16
  */
#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(ll i=0;i<n;i++)
#define repp(i,a,b) for(ll i=a;i<=b;i++)
#define reff(i,a,b) for(ll i=a;i>=b;i--)
#define ll long long int
#define pll pair<ll,ll>
#define fill(a,x) memset(a,x,sizeof(a))
#define mb make_pair
#define pb push_back
#define F first
#define S second
#define M 1000000007
#define dbg(a)         std::cerr<<#a<<"="<<(a)<<"\n"
#define dbg1(a,b)       std::cerr<<#a<<"="<<(a)<<", "<<#b<<"="<<(b)<<"\n"
#define dbg2(a,b,c)     std::cerr<<#a<<"="<<(a)<<", "<<#b<<"="<<(b)<<", "<<#c<<"="<<(c)<<"\n"
#define dbg3(a,b,c,d)   std::cerr<<#a<<"="<<(a)<<", "<<#b<<"="<<(b)<<", "<<#c<<"="<<(c)<<", "<<#d<<"="<<(d)<<"\n"
ll fac[100005];
ll power(ll x,ll y)
{
    ll ans=1;
    while(y>0){
        if(y&1)
            ans=(ans*x)%M;
        x=(x*x)%M;
        y/=2;
    }
    return ans;
}
const int N = 1<<17;
const int TREE_SIZE = (N<<2);
struct tree_node
 {
    int cnt[26];
    tree_node() {
    fill(cnt,0);
  }
};
tree_node tree[TREE_SIZE];
tree_node curr;
int lazy[TREE_SIZE];
int pow2[N];
string s;
int prefix[26],suffix[26],odd[26],even[26];
int count(tree_node a) 
{
    int i,ans=1,curr;
    for(i=0;i<26;i++)
	 {
        if(a.cnt[i]==0) odd[i]=0,even[i]=1;
        else odd[i]=pow2[a.cnt[i]-1],even[i]=pow2[a.cnt[i]-1];
    }
    prefix[0]=even[0];
    for(i=1;i<26;i++) prefix[i]=(prefix[i-1]*1ll*even[i])%M;
    suffix[25]=even[25];
    for(i=24;i>=0;i--) suffix[i]=(suffix[i+1]*1ll*even[i])%M;
    for(i=0;i<26;i++) ans=(ans*1ll*even[i])%M;
    for(i=0;i<26;i++)
	 {
        curr=(((i==0) ? 1 : prefix[i-1])*1ll*((i==25) ? 1 : suffix[i+1]))%M;
        curr=(curr*1ll*odd[i])%M;
        ans=(ans+curr)%M;
    }
    return (ans-1+M)%M;
}
tree_node merge(tree_node a, tree_node b)
 {
    tree_node ans;
    int i;
    for(i=0;i<26;i++) ans.cnt[i]=a.cnt[i]+b.cnt[i];
    return ans;
}
tree_node rotate(tree_node a, int b) 
{
    tree_node ans;
    int i;
    for(i=0;i<26;i++) ans.cnt[i]=a.cnt[(i-b+26)%26];
    return ans;
}
void build_tree(int node, int a, int b) {
  	if(a > b) return; 
  	if(a == b) { 
    		tree[node].cnt[s[a]-'a']=1; 
		return;
	}
	build_tree(node*2, a, (a+b)/2); 
	build_tree(node*2+1, 1+(a+b)/2, b); 
	tree[node] = merge(tree[node*2], tree[node*2+1]); 
}
void update_tree(int node, int a, int b, int i, int j, int value) {
  
  	if(lazy[node] != 0) { 
   		tree[node] = rotate(tree[node],lazy[node]) ;
		if(a != b) {
			lazy[node*2] += lazy[node];
			lazy[node*2]%=26; 
    			lazy[node*2+1] += lazy[node]; 
    			lazy[node*2+1]%=26;
		}
   		lazy[node] = 0; 
  	}
  
	if(a > b || a > j || b < i) 
		return;
    
  	if(a >= i && b <= j) { 
    		tree[node] = rotate(tree[node],value) ;
		if(a != b) { 
			lazy[node*2] += value;
			lazy[node*2]%=26;
			lazy[node*2+1] += value;
			lazy[node*2+1]%=26;
		}
    		return;
	}
	update_tree(node*2, a, (a+b)/2, i, j, value); 
	update_tree(1+node*2, 1+(a+b)/2, b, i, j, value); 

      tree[node] = merge(tree[node*2], tree[node*2+1]);
}
tree_node query_tree(int node, int a, int b, int i, int j) {
	
	if(a > b || a > j || b < i) return tree_node(); 
	if(lazy[node] != 0) { 
		tree[node] = rotate(tree[node],lazy[node]) ;
		if(a != b) {
			lazy[node*2] += lazy[node]; 
			lazy[node*2]%=26;
			lazy[node*2+1] += lazy[node]; 
			lazy[node*2+1]%=26;
		}
		lazy[node] = 0; 
	}
	if(a >= i && b <= j) 
		return tree[node];
	tree_node q1 = query_tree(node*2, a, (a+b)/2, i, j); 
	tree_node q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j); 
	tree_node res = merge(q1, q2);
	
	return res;
}
int main()
{
  ll n,q,type,x,y,z,i;
  pow2[0]=1;
  for(i=1;i<N;i++) pow2[i]=(pow2[i-1]<<1)%M;
  cin>>n>>q>>s;
  build_tree(1, 0, n-1);
  while(q--)
  {
  	 cin>>type;
  	 if(type==1)
  	 {
  	    cin>>x>>y>>z;
		update_tree(1, 0, n-1, x, y,z%26);	
	 }
	 else
	 {
	 	cin>>x>>y;
	 	curr=query_tree(1, 0, n-1,x,y);
	 	cout<<count(curr)<<endl;
	 }
 }
}
